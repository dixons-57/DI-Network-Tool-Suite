package ConstructionOperations;
import java.util.Vector;
import CommonStructures.IntSet;
import SetNotationStructure.SetNotationModule;

/* Represents a module in the construction generated by the Construction tab. 
 * It contains a Set Notation module definition internally,
 * This object effectively "wraps" the aforementioned definition and allows it to
 * connect to other modules, and perform inversion in the context of a network 
 * performing inversion */
public class ConstructionModule{

	/* The "name" of the module, this is simply to help the end-user distinguish multiple
	 * instances of the same module from each other, and helps identify the role that a
	 * module plays in the circuit*/
	private String identifyingName;
	
	/* The index of this module in the overall circuit's list of modules */
	private int indexInCircuitList;

	/* The set of input lines of the module */
	private Vector<ModuleInputLine> inputPorts = new Vector<ModuleInputLine>();

	/* The set of output lines of the module */
	private Vector<ModuleOutputLine> outputPorts = new Vector<ModuleOutputLine>();

	/* The internal Set Notation module definition which dictates its operation */
	private SetNotationModule internalSetDefinition = new SetNotationModule();
	
	/* In the case that this is a SerN (or SerNQ or SerNQ') module, this Vector acts as a mapping
	 * between the inputs of this module, and input sets of the corresponding Set Notation module.
	 * E.g. the 3rd input in inputPorts (or internalSetDefinition) maps to the 3rd IntSet in this 
	 * Vector */
	private Vector<IntSet> correspondingSetModuleInputSets;
	
	/* After calculating the above mapping, this tracks which of the above input sets appear in each
	 * state. There is one IntSet for each state of the module, and each value in the IntSet
	 * corresponds to one of the above Set Notation module input sets. E.g. "in the 1st state of the module
	 * (the IntSet at index 0), the 3rd, 5th, and 6th input sets ({2,4,5}) are present in actions" */
	private Vector<IntSet> correspondingSetModuleInputSetAppearancesBySourceState;
	
	/* In the case that this is a SerN (or SerNQ or SerNQ') module, this Vector acts as a mapping
	 * between the outputs of this module, and output sets of the corresponding Set Notation module.
	 * E.g. the 3rd output in outputPorts (or internalSetDefinition) maps to the 3rd IntSet in this 
	 * Vector */
	private Vector<IntSet> correspondingSetModuleOutputSets;
	
	/* After calculating the above mapping, this tracks which of the above output sets appear in actions which
	 * share a target state (the inverse of the above). There is one IntSet for each state of the module, 
	 * and each value in the IntSet corresponds to one of the above Set Notation module output sets. 
	 * E.g. "regarding the 3rd state of the module (the IntSet at index 2), the 2nd, 3rd, and 4th output sets 
	 * ({1,2,3}) are present in actions that possess the 3rd state of the module as their target state */
	private Vector<IntSet> correspondingSetModuleOutputSetAppearancesByTargetState;
	
	/* These "special attributes" are integer values whose purpose differ depending on
	 * the "type" of module that this object represents
	* in case of MxN Join - 
	*		specialAttributes(0) is size M (horizontal number of inputs)
	*		specialAttributes(1) is next free/unused X (horizontal) input
	*		specialAttributes(2) is next free/unused Y (vertical) input
	* in case of MxN Fork
	*		specialAttributes(0) is size M (horizontal number of inputs)
	*		specialAttributes(1) is next free/unused X input
	*		specialAttributes(2) is next free/unused Y input
	* in case of Merge Tree
	*		specialAttributes(0) is next free/unused input
	* in case of Choice Tree
	*		specialAttributes(0) is next free/unused output
	* in case of Join Tree
	*		specialAttributes(0) is next free/unused input
	* in case of Fork Tree
	*		specialAttributes(0) is next free/unused output */
	private Vector<Integer> specialAttributes = new Vector<Integer>();

	/* Constructs the module object. When passed to this constructor, ModuleInputLine and ModuleOutputLine
	 * instances do not have their references to their parents module's defined yet, though this autocompletes
	 * here */
	public ConstructionModule(String name, Vector<ModuleInputLine> in, Vector<ModuleOutputLine> out, SetNotationModule setDefinition){
		this.identifyingName=name;
		this.internalSetDefinition=setDefinition;
		inputPorts=in;
		outputPorts=out;
		for(int i=0;i<inputPorts.size();i++){
			inputPorts.get(i).setModule(this);
		}
		for(int i=0;i<outputPorts.size();i++){
			outputPorts.get(i).setModule(this);
		}
	}
	
	/* Adds the given value to the special attributes */
	public void addAttribute(int value){
		specialAttributes.add(new Integer(value));
	}

	/* Adds the given input line to the module */
	public void addInput(ModuleInputLine port){
		inputPorts.add(port);
	}

	/* Adds the given output line to the module */
	public void addOutput(ModuleOutputLine port){
		outputPorts.add(port);
	}
	
	/* Prints out a "minimal" set of data about the module,
	 * including name and input/output names, but not the
	 * internal Set Notation definition */
	public String concisePrint(){
		StringBuffer output= new StringBuffer();
		output.append(identifyingName+",{");
		for(int i=0;i<inputPorts.size()-1;i++){
			output.append(inputPorts.get(i).getName()+",");
		}
		output.append(inputPorts.get(inputPorts.size()-1).getName()+"}, {");
		for(int i=0;i<outputPorts.size()-1;i++){
			output.append(outputPorts.get(i).getName()+",");
		}
		output.append(outputPorts.get(outputPorts.size()-1).getName()+"}");
		return output.toString();
	}
	
	/* Get the special attribute value at the given index */
	public int getAttribute(int index){
		return specialAttributes.get(index).intValue();
	}

	/* Get the identifying name of the module */
	public String getIdentifyingName(){
		return identifyingName;
	}

	/* Get the input line at the given index */
	public ModuleInputLine getInput(int index){
		return inputPorts.get(index);
	}

	/* Get the module's internal Set Notation definition */
	public SetNotationModule getInternalSetDefinition(){
		return internalSetDefinition;
	}
	
	/* Get the index of this module in the overall circuit's
	 * list of modules */
	public int getModuleIndexInCircuitList(){
		return indexInCircuitList;
	}

	/* Get the number of input lines of the module */
	public int getNoOfInputs(){
		return inputPorts.size();
	}

	/* Get the number of output lines of the module */
	public int getNoOfOutputs(){
		return outputPorts.size();
	}

	/* Get the output line at the given index */
	public ModuleOutputLine getOutput(int index){
		return outputPorts.get(index);
	}

	/* In the case that this is a SerN, SerNQ, or SerNQ', get
	 * the corresponding Set Notation module's input set
	 * which corresponds to the input at the given index */
	public IntSet getSetInput(int index){
		return correspondingSetModuleInputSets.get(index);
	}

	/* Get the list of Set Notation module input set appearances in the given state,
	 * assuming that this module is a SerN, SerNQ, or SerNQ' instance */
	public IntSet getSetInputAppearancesForState(int state){
		return correspondingSetModuleInputSetAppearancesBySourceState.get(state);
	}

	/* In the case that this is a SerN, SerNQ, or SerNQ', get
	 * the corresponding Set Notation module's output set
	 * which corresponds to the output at the given index */
	public IntSet getSetOutput(int index){
		return correspondingSetModuleOutputSets.get(index);
	}

	/* Get the list of Set Notation module output set appearances 
	 * which share the given target state, assuming that this module is a 
	 * SerN, SerNQ, or SerNQ' instance */
	public IntSet getSetOutputAppearancesForState(int state){
		return correspondingSetModuleOutputSetAppearancesByTargetState.get(state);
	}

	/* Increments the special attribute value at the given index */
	public void incrementAttribute(int index){
		Integer oldValue = specialAttributes.remove(index);
		Integer newValue = new Integer(oldValue.intValue()+1);
		specialAttributes.add(index,newValue);
	}

	/* Inverts the module by swapping the input and output lines. An inverted internal Set
	 * Notation module definition needs to be explicitly provided to the method though, as
	 * inversion of this is not performed automatically. */
	public void invertModule(SetNotationModule invertedSetDefinition){
		identifyingName="Inverted "+identifyingName;
		internalSetDefinition=invertedSetDefinition;
		Vector<ModuleInputLine> newInputPorts = new Vector<ModuleInputLine>();
		for(int i=0;i<outputPorts.size();i++){
			ModuleInputLine newInputPort = new ModuleInputLine(outputPorts.get(i).getName(),this,i);
			newInputPorts.add(newInputPort);
		}
		Vector<ModuleOutputLine> newOutputPorts = new Vector<ModuleOutputLine>();
		for(int i=0;i<inputPorts.size();i++){
			ModuleOutputLine newOutputPort = new ModuleOutputLine(inputPorts.get(i).getName(),this,i);
			newOutputPorts.add(newOutputPort);
		}
		inputPorts.clear();
		outputPorts.clear();
		inputPorts=newInputPorts;
		outputPorts=newOutputPorts;
	}

	/* Removes the input line at the given index */
	public void removeInput(int index){
		inputPorts.remove(index);
	}

	/* Removes the output line at the given index */
	public void removeOutput(int index){
		outputPorts.remove(index);
	}

	/* Sets the special attribute at the given index to the given value */
	public void setAttribute(int index, int value){
		specialAttributes.remove(index);
		Integer replacementValue = new Integer(value);
		specialAttributes.add(index,replacementValue);
	}

	/* Set the identifying name of the module to the given string */
	public void setIdentifyingName(String name){
		identifyingName=name;
	}
	
	/* Set the internal Set Notation module definition to the given definition */
	public void setInternalSetDefinition(SetNotationModule internalSet) {
		internalSetDefinition=internalSet;
	}

	/* Records the index of this module in the circuit's overall list of modules */
	public void setModuleNumber(int value) {
		indexInCircuitList=value;
	}
	
	/* Set the list of Set Notation module input set appearances in the given state,
	 * assuming that this module is a SerN, SerNQ, or SerNQ' instance. This value is calculated 
	 * externally by the GenerateSerNodules class */
	public void storeSetModuleInputAppearancesByState(Vector<IntSet> setInputAppearancesByState) {
		correspondingSetModuleInputSetAppearancesBySourceState=setInputAppearancesByState;
	}

	/* Set the list of Set Notation module input sets which correspond to this module's input lines,
	 * assuming that this module is a SerN, SerNQ, or SerNQ' instance. This value is calculated 
	 * externally by the GenerateSerNodules class */
	public void storeSetModuleInputs(Vector<IntSet> setInputs) {
		correspondingSetModuleInputSets=setInputs;
	}

	/* Set the list of Set Notation module output sets which share the given target state, 
	 * assuming that this module is a SerN, SerNQ, or SerNQ' instance. This value is calculated 
	 * externally by the GenerateSerNodules class */
	public void storeSetModuleOutputAppearancesByState(Vector<IntSet> setOutputAppearancesByState) {
		correspondingSetModuleOutputSetAppearancesByTargetState=setOutputAppearancesByState;
	}
	
	/* Set the list of Set Notation module output sets which correspond to this module's output lines,
	 * assuming that this module is a SerN, SerNQ, or SerNQ' instance. This value is calculated 
	 * externally by the GenerateSerNodules class */
	public void storeSetModuleOutputs(Vector<IntSet> setOutputs) {
		correspondingSetModuleOutputSets=setOutputs;
	}
	
	/* In the case of this module being SerNQ or SerNQ', this swaps the values of the records of
	 * which input/output lines correspond to the Set Notation module's input/output sets, as well
	 * as the record of their appearances in each source/target state. This is needed for when we perform
	 * inversion of a module, before generating Stage 2 of the construction (in case of non-b-arb). */
	public void swapSetAppearances(){
		Vector<IntSet> tempInputSets;
		Vector<IntSet> tempInputSetAppearancesByState;
		tempInputSets=correspondingSetModuleOutputSets;
		tempInputSetAppearancesByState=correspondingSetModuleOutputSetAppearancesByTargetState;
		correspondingSetModuleOutputSets=correspondingSetModuleInputSets;
		correspondingSetModuleOutputSetAppearancesByTargetState=correspondingSetModuleInputSetAppearancesBySourceState;
		correspondingSetModuleInputSets=tempInputSets;
		correspondingSetModuleInputSetAppearancesBySourceState=tempInputSetAppearancesByState;
	}
}
