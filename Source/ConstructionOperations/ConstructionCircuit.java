package ConstructionOperations;
import java.util.Vector;

/* Represents the circuit of modules generated by the Construction tab */
public class ConstructionCircuit {
	
	/* The list of input lines of internal modules, which act as input lines to the network */
	private Vector<ModuleInputLine> circuitInputs = new Vector<ModuleInputLine>();
	
	/* The external labels of the above input lines to the network */
	private Vector<String> externalInputLabels = new Vector<String>();
	
	/* The list of output lines of internal modules, which act as output lines of the network */
	private Vector<ModuleOutputLine> circuitOutputs = new Vector<ModuleOutputLine>();

	/* The external labels of the above output lines of the network */
	private Vector<String> externalOutputLabels = new Vector<String>();
	
	/* The list of modules within the network */
	private Vector<ConstructionModule> modules = new Vector<ConstructionModule>();

	/* The number of SerNQ modules contained within the network */
	private int noOfSerNQModulesForInputStage;
	
	/* The set of wires in this circuit */
	private Vector<Wire> wires = new Vector<Wire>();

	/* Adds the given module to the circuit */
	public void addConstructionModule(ConstructionModule module){
		modules.add(module);
	}
	
	/* Adds the given wire to the circuit */
	public void addWire(Wire connection){
		wires.add(connection);
	}
	
	/* Returns the DI-Set algebra representation of this circuit. It basically
	 * iterates through all modules in the circuit, and appending the state constants
	 * which are needed to the DI-Set algebra network definition, and adds them
	 * in the CCS-like form of their appropriate states to the actual top-level 
	 * network term. The wire function is generated in a straightforward way based
	 * on the list of wires in the circuit, all ports on all modules are hidden. This allows
	 * us to easily connect up the environment of the original module to this implementation
	 * in the DI-Set Algebra tab if we want to */
	public String getDIAlgebraRepresentation() {
		StringBuffer output = new StringBuffer();
		Vector<String> moduleStateNamesAdded = new Vector<String>();
		
		/* Add module state constant definitions - this requires that no two "different" modules
		 * (NOT to be confused with two different instances of the same module) use
		 * the same state name at all. Fortunately, this does not happen as a result of 
		 * the algorithm */
		for(int i=0;i<modules.size();i++){
			ConstructionModule currentModule = modules.get(i);
			boolean moduleStateAdded=false;
			for(int j=0;j<moduleStateNamesAdded.size();j++){
				if(moduleStateNamesAdded.get(j).equals(currentModule.getInternalSetDefinition().getStateName(0))){
					moduleStateAdded=true;
					break;
				}
			}
			if(!moduleStateAdded){
				moduleStateNamesAdded.addAll(currentModule.getInternalSetDefinition().getStateNames());
				output.append(currentModule.getInternalSetDefinition().printModule()+"\n");
			}
		}
		
		/* Build the wire function */
		output.append("w={");
		for(int i=0;i<wires.size();i++){
			output.append("("+wires.get(i).getOutPort().getName()+":"+wires.get(i).getOutPort().getModule().getModuleIndexInCircuitList()+
					","+
					wires.get(i).getInPort().getName()+":"+wires.get(i).getInPort().getModule().getModuleIndexInCircuitList()+")");
				output.append(",");
		}
		for(int i=0;i<circuitInputs.size();i++){
			output.append("("+externalInputLabels.get(i)+":E,"+circuitInputs.get(i).getName()+":"+circuitInputs.get(i).getModule().getModuleIndexInCircuitList()+")");
				output.append(",");
		}
		for(int i=0;i<circuitOutputs.size();i++){
			output.append("("+circuitOutputs.get(i).getName()+":"+circuitOutputs.get(i).getModule().getModuleIndexInCircuitList()+","+externalOutputLabels.get(i)+":E)");
			if(i<circuitOutputs.size()-1){
				output.append(",");
			}
		}
		
		/* Build the network term */
		output.append("};\nNetwork =");
		for(int i=0;i<modules.size();i++){
			output.append("("+modules.get(i).getInternalSetDefinition().getStateName(0)+"):"+modules.get(i).getModuleIndexInCircuitList());
			if(i<modules.size()-1){
				output.append("|");
			}
		}
		output.append("||{}w-{");

		/* Hide all ports on all modules */
		for(int i=0;i<modules.size();i++){
			output.append("*:"+modules.get(i).getModuleIndexInCircuitList());
			if(i<modules.size()-1){
				output.append(",");
			}
		}
		output.append("};");
		return output.toString();
	}

	/* Get the input port to the circuit at the given index */
	public ModuleInputLine getInput(int index){
		return circuitInputs.get(index);
	}
	
	/* Get the external input label for the circuit at the given index */
	public String getInputLabel(int index){
		return externalInputLabels.get(index);
	}
	
	/* Get the wire at the given index */
	public Wire getWire(int index){
		return wires.get(index);
	}
	
	/* Get the module at the given index */
	public ConstructionModule getModule(int index){
		return modules.get(index);
	}
	
	/* Get the number of inputs to the circuit */
	public int getNoOfInputs(){
		return circuitInputs.size();
	}
	
	/* Get the number of wires in the circuit */
	public int getNoOfWires(){
		return wires.size();
	}
	
	/* Get the number of modules in the circuit */
	public int getNoOfModules(){
		return modules.size();
	}
	
	/* Get the number of outputs from the circuit */
	public int getNoOfOutputs(){
		return circuitOutputs.size();
	}
	
	/* Get the output port from the circuit at the given index */
	public ModuleOutputLine getOutput(int index){
		return circuitOutputs.get(index);
	}
	
	/* Number the modules in the circuit, this simply iterates through them
	 * and gives them all a unique numerical identifier, this helps for
	 * displaying them on screen */
	public void numberModules(){
		for(int i=0;i<modules.size();i++){
			modules.get(i).setModuleNumber(i+1);
		}
	}

	/* Print all information about the circuit on screen */
	public String printCircuit(){
		StringBuffer output = new StringBuffer();
		output.append("SerNQ definition:\n");
		output.append(modules.get(0).getInternalSetDefinition().printModule()+"\n\n");
		output.append("SerNQ' definition:\n");
		output.append(modules.get(noOfSerNQModulesForInputStage).getInternalSetDefinition().printModule()+"\n\n");
		output.append("List of modules:\n\n");
		for(int i=0;i<modules.size();i++){
			output.append((i+1)+": "+modules.get(i).concisePrint()+"\n");
		}
		
		output.append("\n\nList of wires/interconnections between modules\n\n");
		
		for(int i=0;i<wires.size();i++){
			output.append(wires.get(i).print()+"\n");
		}
		
		output.append("\n\nInputs to the network\n\n");
		for(int i=0;i<circuitInputs.size();i++){
			output.append("Input "+externalInputLabels.get(i)+ " is on module "
					+circuitInputs.get(i).getModule().getModuleIndexInCircuitList()+": "
					+circuitInputs.get(i).getModule().getIdentifyingName()+"'s input "+circuitInputs.get(i).getName()+"\n");
		}
		output.append("\n\nOutputs from the network\n\n");
		for(int i=0;i<circuitOutputs.size();i++){
			output.append("Output "+externalOutputLabels.get(i)+ " is on module "
					+circuitOutputs.get(i).getModule().getModuleIndexInCircuitList()+": "
					+circuitOutputs.get(i).getModule().getIdentifyingName()+"'s output "+circuitOutputs.get(i).getName()+"\n");
		}
		return output.toString();
	}
	
	/* Sets the input at the given index of the given module as an input to the circuit,
	 * with the given external label */
	public void setCircuitInput(int moduleIndex, int inputIndex, String externalLabel){
		circuitInputs.addElement(modules.get(moduleIndex).getInput(inputIndex));
		externalInputLabels.add(externalLabel);
	}

	/* Sets the output at the given index of the given module as an output from the circuit,
	 * with the given external label */
	public void setCircuitOutput(int moduleIndex, int outputIndex, String externalLabel){
		circuitOutputs.addElement(modules.get(moduleIndex).getOutput(outputIndex));
		externalOutputLabels.add(externalLabel);
	}

	/* Records the number of SerNQ in the input stage of the construction, this is useful
	 * for when we print out information about the circuit */
	public void setNoOfSerNQForInputStage(int noSerNQ) {
		noOfSerNQModulesForInputStage=noSerNQ;
	}
	
}
